// <auto-generated />
using System;
using DataAccess.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(APIDbContext))]
    partial class APIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Transports", b =>
                {
                    b.Property<int>("TransportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportId"));

                    b.Property<string>("FlightCarrier")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("TransportId");

                    b.ToTable("Transports", (string)null);
                });

            modelBuilder.Entity("Entities.VehicleTypes", b =>
                {
                    b.Property<int>("IdVehicleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVehicleType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("IdVehicleType");

                    b.ToTable("VehicleTypes", (string)null);
                });

            modelBuilder.Entity("Entities.Vehicles", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("IdVehicleType")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NumberPassengers")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("IdVehicleType")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.HasIndex("IdVehicleType");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("Entities.Vehicles", b =>
                {
                    b.HasOne("Entities.VehicleTypes", "VehicleType")
                        .WithMany()
                        .HasForeignKey("IdVehicleType");

                    b.Navigation("VehicleType");
                });
#pragma warning restore 612, 618
        }
    }
}
